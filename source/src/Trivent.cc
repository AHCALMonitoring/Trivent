  /// \file Trivent.cc
/*
 *
 * Trivent.cc source template automatically generated by a class generator
 * Creation date : ven. mars 18 2016
 *
 * This file is part of Trivent libraries.
 * 
 * Trivent is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * Trivent is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with Trivent.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#include "Trivent.h"
#include "Event.h"

namespace trivent
{

Trivent::Trivent() :
		m_initialized(false),
		m_timeWindow(2),
		m_minPeakSize(10)
{
	/* nop */
}

Trivent::~Trivent() 
{
	/* nop */
}

void Trivent::init(const Trivent::Parameters &parameters)
{
	if(m_initialized)
		return;

	m_timeWindow = parameters.m_timeWindow;
	m_minPeakSize = parameters.m_minPeakSize;
	m_maskCollectionNames = parameters.m_maskCollectionNames;

	m_initialized = true;
}

void Trivent::addListener(TriventListener *pListener)
{
	if(NULL == pListener)
		return;

	m_listeners.insert(pListener);
}

void Trivent::removeListener(TriventListener *pListener)
{
	if(NULL == pListener)
		return;

	m_listeners.erase(pListener);
}

void Trivent::processEvent(const Event &inputEvent)
{
	// check for initialization
	if( ! m_initialized )
		return;

	// if no listeners, no need to process
	if( m_listeners.empty() )
		return;



}

} 


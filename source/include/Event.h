  /// \file Event.h
/*
 *
 * Event.h header template automatically generated by a class generator
 * Creation date : ven. mars 18 2016
 *
 * This file is part of Trivent libraries.
 * 
 * Trivent is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * Trivent is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with Trivent.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef EVENT_H
#define EVENT_H

// -- trivent headers
#include "Unit.h"

// -- std headers
#include <map>
#include <string>
#include <vector>

namespace trivent
{

/** 
 *  @brief  Event class
 *
 *  Basic interface to store a user input event.
 *  Trivent units are stored in different collections which can be
 *  added using Event::addUnit() or Event::addUnits() methods.
 *  Units can thus be accessed using Event::getUnits().
 */ 
class Event 
{
public:
	/**
	 *  @brief  Constructor
	 */
	Event();

	/**
	 *  @brief  Destructor
	 */
	~Event();

	/**
	 *  @brief  Set the user event. Can be retrieve using getUserEvent()
	 *
	 *  @param  pUserEvent the user event provided as a void pointer
	 */
	void setUserEvent(void *pUserEvent);

	/**
	 *  @brief  Get the user event as a void pointer
	 */
	void *getUserEvent() const;

	/**
	 *  @brief  Set the time stamp of this event.
	 *  Set by Trivent algorithm as the main peak time stamp.
	 *
	 *  @param  timeStamp  the time stamp
	 */
	void setTimeStamp(uint64_t timeStamp);

	/**
	 *  @brief  Get the reconstructed time stamp by the trivent algorithm
	 */
	uint64_t getTimeStamp() const;

	/**
	 *  @brief  Clear the event content
	 *
	 *  @param  deepClean whether to call delete on Trivent units
	 */
	void clear(bool deepClean = true);

	/**
	 *  @brief  Add a single unit to target collection
	 *
	 *  @param  collectionName the collection name in which to add the unit
	 *  @param  pUnit the unit pointer to add
	 */
	void addUnit(const std::string &collectionName, Unit *pUnit);

	/**
	 *  @brief  Add multiple units to target collection
	 *
	 *  @param  collectionName the collection name in which to add the units
	 *  @param  unitSet the unit list to add
	 */
	void addUnits(const std::string &collectionName, const UnitSet &unitSet);

	/**
	 *  @brief  Remove a single unit from the target collection
	 *
	 *  @param  collectionName the collection name in which to remove the unit
	 *  @param  pUnit the unit pointer to remove
	 *  @param  callDelete whether to call delete on removal
	 */
	void removeUnit(const std::string &collectionName, Unit *pUnit, bool callDelete = true);

	/**
	 *  @brief  Remove units from the target collection
	 *
	 *  @param  collectionName the collection name in which to remove the units
	 *  @param  pUnit the unit list to remove
	 *  @param  callDelete whether to call delete on removal
	 */
	void removeUnits(const std::string &collectionName, const UnitSet &unitSet, bool callDelete = true);

	/**
	 *  @brief  Get the unit list saved as the target collection name
	 *
	 *  @param  collectionName the collection name in which to get the units
	 *  @param  unitSet the unit set to receive
	 */
	void getUnits(const std::string &collectionName, UnitSet &unitSet) const;

	/**
	 *  @brief  Get the available collection names
	 *
	 *  @return the list of available collections
	 */
	std::vector<std::string> getCollectionNames() const;

private:
	typedef std::map<const std::string, UnitSet> UnitCollectionMap;

	UnitCollectionMap                    m_unitCollectionMap;   ///< The unit collection list map
	void                                *m_pUserEvent;
	uint64_t                             m_timeStamp;
};

} 

#endif  //  EVENT_H

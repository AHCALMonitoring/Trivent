  /// \file Trivent.h
/*
 *
 * Trivent.h header template automatically generated by a class generator
 * Creation date : ven. mars 18 2016
 *
 * This file is part of Trivent libraries.
 * 
 * Trivent is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * Trivent is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with Trivent.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef TRIVENT_H
#define TRIVENT_H

// -- std headers
#ifdef __APPLE__
#include <_types.h>
#include <_types/_uint8_t.h>
#include <_types/_uint16_t.h>
#include <_types/_uint32_t.h>
#include <_types/_uint64_t.h>
#include <sys/_types/_int16_t.h>
#include <sys/_types/_int64_t.h>
#else
#include <stdint.h>
#endif
#include <string>
#include <set>

// -- trivent headers
#include "TriventListener.h"

namespace trivent
{

class Event;

/** 
 *  @brief  Trivent class
 */ 
class Trivent 
{
public:
	/**
	 *  @brief Parameters class
	 */
	class Parameters
	{
	public:
		/**
		 *  @brief  Constructor
		 */
		Parameters();

	public:
		uint64_t                       m_timeWindow;
		uint32_t                       m_minPeakSize;

		std::set<std::string>          m_maskCollectionNames;
	};

public:
	/**
	 *  @brief  Constructor
	 */
	Trivent();

	/**
	 *  @brief  Destructor
	 */
	virtual ~Trivent();

	/**
	 *  @brief  Initialize the trivent algorithm with parameters
	 */
	void init(const Parameters &parameters);

	/**
	 *  @brief  Add a Trivent listener
	 */
	void addListener(TriventListener *pListener);

	/**
	 *  @brief  Remove a Trivent listener
	 */
	void removeListener(TriventListener *pListener);

	/**
	 *  @brief  Process a trivent event.
	 *          Split the event in different sub events by
	 *          clustering them within time peaks.
	 *          Each time an event is found, listeners are notified
	 */
	virtual void processEvent(const Event &inputEvent);

private:
	bool                             m_initialized;
	TriventListenerSet               m_listeners;

	// algorithm parameters
	uint64_t                         m_timeWindow;
	uint32_t                         m_minPeakSize;
	std::set<std::string>            m_maskCollectionNames;
}; 

} 

#endif  //  TRIVENT_H
